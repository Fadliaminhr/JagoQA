{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 5,
    "pending": 0,
    "failures": 6,
    "start": "2023-09-11T09:25:56.242Z",
    "end": "2023-09-11T09:26:03.478Z",
    "duration": 7236,
    "testsRegistered": 11,
    "passPercent": 45.45454545454545,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2ed8d240-ace1-461d-a14d-8ee3f9cc1633",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7f487919-2975-4223-9a34-c7452226cc51",
          "title": "Scenario Login Feature",
          "fullFile": "C:\\Users\\fadli\\Documents\\JagoQA\\JagoQA\\Login\\login.js",
          "file": "\\JagoQA\\Login\\login.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1.Verify Success Login with valid email and password",
              "fullTitle": "Scenario Login Feature 1.Verify Success Login with valid email and password",
              "timedOut": false,
              "duration": 752,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"jokotampan900@gmail.com\", password: \"jokotampan900\" });\nexpect(response.body.status).to.eql('SUCCESS_LOGIN');\nexpect(response.body.message).to.eql('Anda Berhasil Login');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\", \"credentials\");",
              "err": {},
              "uuid": "ed481f68-3762-4afb-97c6-761461c5cbb8",
              "parentUUID": "7f487919-2975-4223-9a34-c7452226cc51",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2.Verify Failed Login with empty email & password",
              "fullTitle": "Scenario Login Feature 2.Verify Failed Login with empty email & password",
              "timedOut": false,
              "duration": 609,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"\", password: \"\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Cek kembali email anda'); cls\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Email & Password tidak boleh kosong' to equal 'Cek kembali email anda'",
                "estack": "AssertionError: expected 'Email & Password tidak boleh kosong' to equal 'Cek kembali email anda'\n    at Context.<anonymous> (JagoQA\\Login\\login.js:20:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Email & Password tidak boleh kosong\n+ Cek kembali email anda\n"
              },
              "uuid": "bf03f0a0-1eb2-4a49-aca7-46f224935166",
              "parentUUID": "7f487919-2975-4223-9a34-c7452226cc51",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3.Verify Failed Login with email registered & empty password",
              "fullTitle": "Scenario Login Feature 3.Verify Failed Login with email registered & empty password",
              "timedOut": false,
              "duration": 601,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"admintesting@gmail.com\", password: \"\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Password tidak boleh kosong' to equal 'Email atau Password Anda Salah'",
                "estack": "AssertionError: expected 'Password tidak boleh kosong' to equal 'Email atau Password Anda Salah'\n    at Context.<anonymous> (JagoQA\\Login\\login.js:28:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Password tidak boleh kosong\n+ Email atau Password Anda Salah\n"
              },
              "uuid": "6679251e-6300-469d-ac98-eddbf7780234",
              "parentUUID": "7f487919-2975-4223-9a34-c7452226cc51",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4.Verify Failed Login with email & password are not registered or invalid",
              "fullTitle": "Scenario Login Feature 4.Verify Failed Login with email & password are not registered or invalid",
              "timedOut": false,
              "duration": 599,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"email\", password: \"\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Password tidak boleh kosong' to equal 'Email atau Password Anda Salah'",
                "estack": "AssertionError: expected 'Password tidak boleh kosong' to equal 'Email atau Password Anda Salah'\n    at Context.<anonymous> (JagoQA\\Login\\login.js:36:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Password tidak boleh kosong\n+ Email atau Password Anda Salah\n"
              },
              "uuid": "def9faa7-ccfc-43ae-980e-2e24c61473c9",
              "parentUUID": "7f487919-2975-4223-9a34-c7452226cc51",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5.Verify Login with valid email & password are not registered or invalid",
              "fullTitle": "Scenario Login Feature 5.Verify Login with valid email & password are not registered or invalid",
              "timedOut": false,
              "duration": 607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"admintesting@gmail.com\", password: \"password\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "a8ece48d-61ca-4d13-a0b0-2a3efc26837f",
              "parentUUID": "7f487919-2975-4223-9a34-c7452226cc51",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "6.Login with invalid email & password valid",
              "fullTitle": "Scenario Login Feature 6.Login with invalid email & password valid",
              "timedOut": false,
              "duration": 589,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"admintesting12@gmail.com\", password: \"admintesting12@gmail.com\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Email/Password melebihin maksimal kar…' to equal 'Email atau Password Anda Salah'",
                "estack": "AssertionError: expected 'Email/Password melebihin maksimal kar…' to equal 'Email atau Password Anda Salah'\n    at Context.<anonymous> (JagoQA\\Login\\login.js:52:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Email/Password melebihin maksimal karakter\n+ Email atau Password Anda Salah\n"
              },
              "uuid": "5975ee95-ae36-4cc9-938f-0b2eb3342971",
              "parentUUID": "7f487919-2975-4223-9a34-c7452226cc51",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed481f68-3762-4afb-97c6-761461c5cbb8",
            "a8ece48d-61ca-4d13-a0b0-2a3efc26837f"
          ],
          "failures": [
            "bf03f0a0-1eb2-4a49-aca7-46f224935166",
            "6679251e-6300-469d-ac98-eddbf7780234",
            "def9faa7-ccfc-43ae-980e-2e24c61473c9",
            "5975ee95-ae36-4cc9-938f-0b2eb3342971"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3757,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "65fbca64-143f-4a94-a756-7655e276598c",
          "title": "Scenario Register Feature",
          "fullFile": "C:\\Users\\fadli\\Documents\\JagoQA\\JagoQA\\Register\\Register.js",
          "file": "\\JagoQA\\Register\\Register.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1.Verify Success Register",
              "fullTitle": "Scenario Register Feature 1.Verify Success Register",
              "timedOut": false,
              "duration": 730,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"fadlitesting@gmail.com\", \"password\": \"qwerty\", \"name\": \"FadliJagoQA\" })\nexpect(response.body.status).to.eql('SUCCESS_REGISTER');\nexpect(response.body.message).to.eql('created user!');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'FAILED_REGISTER' to deeply equal 'SUCCESS_REGISTER'",
                "estack": "AssertionError: expected 'FAILED_REGISTER' to deeply equal 'SUCCESS_REGISTER'\n    at Context.<anonymous> (JagoQA\\Register\\Register.js:9:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- FAILED_REGISTER\n+ SUCCESS_REGISTER\n"
              },
              "uuid": "539efe14-6cfa-4d47-93f0-9e75ea0de55e",
              "parentUUID": "65fbca64-143f-4a94-a756-7655e276598c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2.Verify Failed Register with empty name",
              "fullTitle": "Scenario Register Feature 2.Verify Failed Register with empty name",
              "timedOut": false,
              "duration": 616,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"fadlitesting@gmail.com\", \"password\": \"qwerty\", \"name\": \"\" })\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.message).to.eql('Gagal Registrasi');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "551c398e-2099-4175-933d-07df4718b238",
              "parentUUID": "65fbca64-143f-4a94-a756-7655e276598c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3.Verify Failed Register with all request body is empty",
              "fullTitle": "Scenario Register Feature 3.Verify Failed Register with all request body is empty",
              "timedOut": false,
              "duration": 680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"\", \"password\": \"\", \"name\": \"\" })\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.message).to.eql('Gagal Registrasi');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "d671c6e0-c8fc-4f86-8d14-8d89b2dcfd36",
              "parentUUID": "65fbca64-143f-4a94-a756-7655e276598c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4.Verify Failed Register if email using invalid format",
              "fullTitle": "Scenario Register Feature 4.Verify Failed Register if email using invalid format",
              "timedOut": false,
              "duration": 631,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"user@example.c\", \"password\": \"qwerty\", \"name\": \"FadliJagoQA1\" })\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.message).to.eql('Cek kembali email anda');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "e175f8f5-ea59-419e-afec-83f307818880",
              "parentUUID": "65fbca64-143f-4a94-a756-7655e276598c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5.Verify Failed Register if name contains number",
              "fullTitle": "Scenario Register Feature 5.Verify Failed Register if name contains number",
              "timedOut": false,
              "duration": 669,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"fadliamintesting12@gmail.com\", \"password\": \"qwerty\", \"name\": \"FadliJagoQA1\" })\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.message).to.eql('Tidak boleh mengandung symbol');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Gagal Registrasi' to deeply equal 'Tidak boleh mengandung symbol'",
                "estack": "AssertionError: expected 'Gagal Registrasi' to deeply equal 'Tidak boleh mengandung symbol'\n    at Context.<anonymous> (JagoQA\\Register\\Register.js:42:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Gagal Registrasi\n+ Tidak boleh mengandung symbol\n"
              },
              "uuid": "ee2814b6-347f-4708-9e7a-201b42d5d9a3",
              "parentUUID": "65fbca64-143f-4a94-a756-7655e276598c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "551c398e-2099-4175-933d-07df4718b238",
            "d671c6e0-c8fc-4f86-8d14-8d89b2dcfd36",
            "e175f8f5-ea59-419e-afec-83f307818880"
          ],
          "failures": [
            "539efe14-6cfa-4d47-93f0-9e75ea0de55e",
            "ee2814b6-347f-4708-9e7a-201b42d5d9a3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3326,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}