{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 5,
    "pending": 0,
    "failures": 6,
    "start": "2023-09-05T10:20:08.631Z",
    "end": "2023-09-05T10:20:15.805Z",
    "duration": 7174,
    "testsRegistered": 11,
    "passPercent": 45.45454545454545,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d5f2dfa3-4db4-403c-a0d6-62fd0c7c3068",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a5e8339d-f5a1-41b3-b8d3-2dcd76696294",
          "title": "Scenario Login Feature",
          "fullFile": "C:\\Users\\fadli\\Documents\\JagoQA\\JagoQA\\Login\\login.js",
          "file": "\\JagoQA\\Login\\login.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1.Verify Success Login with valid email and password",
              "fullTitle": "Scenario Login Feature 1.Verify Success Login with valid email and password",
              "timedOut": false,
              "duration": 810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"jokotampan900@gmail.com\", password: \"jokotampan900\" });\nexpect(response.body.status).to.eql('SUCCESS_LOGIN');\nexpect(response.body.message).to.eql('Anda Berhasil Login');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\", \"credentials\");",
              "err": {},
              "uuid": "9f4575d6-097e-4870-badd-778fb6e1cf4f",
              "parentUUID": "a5e8339d-f5a1-41b3-b8d3-2dcd76696294",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2.Verify Failed Login with empty email & password",
              "fullTitle": "Scenario Login Feature 2.Verify Failed Login with empty email & password",
              "timedOut": false,
              "duration": 613,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"\", password: \"\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Cek kembali email anda'); cls\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Email & Password tidak boleh kosong' to equal 'Cek kembali email anda'",
                "estack": "AssertionError: expected 'Email & Password tidak boleh kosong' to equal 'Cek kembali email anda'\n    at Context.<anonymous> (JagoQA\\Login\\login.js:20:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Email & Password tidak boleh kosong\n+ Cek kembali email anda\n"
              },
              "uuid": "2415647b-2653-49c5-8b4a-1645edf55bf4",
              "parentUUID": "a5e8339d-f5a1-41b3-b8d3-2dcd76696294",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3.Verify Failed Login with email registered & empty password",
              "fullTitle": "Scenario Login Feature 3.Verify Failed Login with email registered & empty password",
              "timedOut": false,
              "duration": 632,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"admintesting@gmail.com\", password: \"\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Password tidak boleh kosong' to equal 'Email atau Password Anda Salah'",
                "estack": "AssertionError: expected 'Password tidak boleh kosong' to equal 'Email atau Password Anda Salah'\n    at Context.<anonymous> (JagoQA\\Login\\login.js:28:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Password tidak boleh kosong\n+ Email atau Password Anda Salah\n"
              },
              "uuid": "64990e28-6a76-4308-ab19-0e60a4fc1405",
              "parentUUID": "a5e8339d-f5a1-41b3-b8d3-2dcd76696294",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4.Verify Failed Login with email & password are not registered or invalid",
              "fullTitle": "Scenario Login Feature 4.Verify Failed Login with email & password are not registered or invalid",
              "timedOut": false,
              "duration": 601,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"email\", password: \"\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Password tidak boleh kosong' to equal 'Email atau Password Anda Salah'",
                "estack": "AssertionError: expected 'Password tidak boleh kosong' to equal 'Email atau Password Anda Salah'\n    at Context.<anonymous> (JagoQA\\Login\\login.js:36:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Password tidak boleh kosong\n+ Email atau Password Anda Salah\n"
              },
              "uuid": "8e61fc58-5d4d-424e-a6f5-d9c88e6274a1",
              "parentUUID": "a5e8339d-f5a1-41b3-b8d3-2dcd76696294",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5.Verify Login with valid email & password are not registered or invalid",
              "fullTitle": "Scenario Login Feature 5.Verify Login with valid email & password are not registered or invalid",
              "timedOut": false,
              "duration": 639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"admintesting@gmail.com\", password: \"password\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "fe6d3f78-b65f-41da-ad6b-5669b01bf0bf",
              "parentUUID": "a5e8339d-f5a1-41b3-b8d3-2dcd76696294",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "6.Login with invalid email & password valid",
              "fullTitle": "Scenario Login Feature 6.Login with invalid email & password valid",
              "timedOut": false,
              "duration": 713,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/login\")\n  .send({ email: \"admintesting12@gmail.com\", password: \"admintesting12@gmail.com\" })\nexpect(response.body.status).to.equal('FAILED_LOGIN');\nexpect(response.body.message).to.equal('Email atau Password Anda Salah');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Email/Password melebihin maksimal kar…' to equal 'Email atau Password Anda Salah'",
                "estack": "AssertionError: expected 'Email/Password melebihin maksimal kar…' to equal 'Email atau Password Anda Salah'\n    at Context.<anonymous> (JagoQA\\Login\\login.js:52:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Email/Password melebihin maksimal karakter\n+ Email atau Password Anda Salah\n"
              },
              "uuid": "fef51702-f50a-4300-a4ce-e07c36f9eebf",
              "parentUUID": "a5e8339d-f5a1-41b3-b8d3-2dcd76696294",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f4575d6-097e-4870-badd-778fb6e1cf4f",
            "fe6d3f78-b65f-41da-ad6b-5669b01bf0bf"
          ],
          "failures": [
            "2415647b-2653-49c5-8b4a-1645edf55bf4",
            "64990e28-6a76-4308-ab19-0e60a4fc1405",
            "8e61fc58-5d4d-424e-a6f5-d9c88e6274a1",
            "fef51702-f50a-4300-a4ce-e07c36f9eebf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4008,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e3e17c2a-f72a-4978-b7f1-e4c8815d068d",
          "title": "Scenario Register Feature",
          "fullFile": "C:\\Users\\fadli\\Documents\\JagoQA\\JagoQA\\Register\\Register.js",
          "file": "\\JagoQA\\Register\\Register.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1.Verify Success Register",
              "fullTitle": "Scenario Register Feature 1.Verify Success Register",
              "timedOut": false,
              "duration": 612,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"fadlitesting@gmail.com\", \"password\": \"qwerty\", \"name\": \"FadliJagoQA\" })\nexpect(response.body.status).to.eql('SUCCESS_REGISTER');\nexpect(response.body.message).to.eql('created user!');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'FAILED_REGISTER' to deeply equal 'SUCCESS_REGISTER'",
                "estack": "AssertionError: expected 'FAILED_REGISTER' to deeply equal 'SUCCESS_REGISTER'\n    at Context.<anonymous> (JagoQA\\Register\\Register.js:9:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- FAILED_REGISTER\n+ SUCCESS_REGISTER\n"
              },
              "uuid": "a2650628-0aff-4b5f-8bab-bb60acb3e0e1",
              "parentUUID": "e3e17c2a-f72a-4978-b7f1-e4c8815d068d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2.Verify Failed Register with empty name",
              "fullTitle": "Scenario Register Feature 2.Verify Failed Register with empty name",
              "timedOut": false,
              "duration": 589,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"fadlitesting@gmail.com\", \"password\": \"qwerty\", \"name\": \"\" })\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.message).to.eql('Gagal Registrasi');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "76147a7d-d20a-43fa-a5d7-58811aa8b46a",
              "parentUUID": "e3e17c2a-f72a-4978-b7f1-e4c8815d068d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3.Verify Failed Register with all request body is empty",
              "fullTitle": "Scenario Register Feature 3.Verify Failed Register with all request body is empty",
              "timedOut": false,
              "duration": 624,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"\", \"password\": \"\", \"name\": \"\" })\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.message).to.eql('Gagal Registrasi');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "eecfab51-5263-4b83-9002-63792e8055fd",
              "parentUUID": "e3e17c2a-f72a-4978-b7f1-e4c8815d068d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4.Verify Failed Register if email using invalid format",
              "fullTitle": "Scenario Register Feature 4.Verify Failed Register if email using invalid format",
              "timedOut": false,
              "duration": 682,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"user@example.c\", \"password\": \"qwerty\", \"name\": \"FadliJagoQA1\" })\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.message).to.eql('Cek kembali email anda');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "59f41242-7e13-4e9e-8d4e-2fb2d926ee2a",
              "parentUUID": "e3e17c2a-f72a-4978-b7f1-e4c8815d068d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5.Verify Failed Register if name contains number",
              "fullTitle": "Scenario Register Feature 5.Verify Failed Register if name contains number",
              "timedOut": false,
              "duration": 609,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n  .post(\"/register\")\n  .send({ \"email\": \"fadliamintesting12@gmail.com\", \"password\": \"qwerty\", \"name\": \"FadliJagoQA1\" })\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.message).to.eql('Tidak boleh mengandung symbol');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {
                "message": "AssertionError: expected 'Gagal Registrasi' to deeply equal 'Tidak boleh mengandung symbol'",
                "estack": "AssertionError: expected 'Gagal Registrasi' to deeply equal 'Tidak boleh mengandung symbol'\n    at Context.<anonymous> (JagoQA\\Register\\Register.js:42:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Gagal Registrasi\n+ Tidak boleh mengandung symbol\n"
              },
              "uuid": "cd9c1506-74ec-4f3b-b927-176f2e48a72e",
              "parentUUID": "e3e17c2a-f72a-4978-b7f1-e4c8815d068d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76147a7d-d20a-43fa-a5d7-58811aa8b46a",
            "eecfab51-5263-4b83-9002-63792e8055fd",
            "59f41242-7e13-4e9e-8d4e-2fb2d926ee2a"
          ],
          "failures": [
            "a2650628-0aff-4b5f-8bab-bb60acb3e0e1",
            "cd9c1506-74ec-4f3b-b927-176f2e48a72e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}